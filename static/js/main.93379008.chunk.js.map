{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","to","aboutText","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","About","myStyle","setMyStyle","btnText","setBtnText","class","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","message","App","setMode","setAlert","msg","setTimeout","basename","document","body","Date","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.93379008.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  // let myStyle = {\r\n  //   color: \"white\",\r\n  //   backgroundColor: \"black\",\r\n  // };\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              {props.mode === \"dark\" ? \"Disable dark mode\" : \"Enable dark mode\"}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About text here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  // Credits: A\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n  };\r\n\r\n  // Credits: Coding Wala\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed!\", \"success\");\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  // text = \"new text\"; // Wrong way to change the state\r\n  // setText(\"new text\"); // Correct way to change the state\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#13466e\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleLoClick}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleCopy}\r\n        >\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p>\r\n          {0.008 *\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !== 0;\r\n            }).length}{\" \"}\r\n          Minutes read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [myStyle, setMyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n\r\n  const [btnText, setBtnText] = useState(\"Enable dark mode\");\r\n\r\n  const toggleStyle = () => {\r\n    if (myStyle.color === \"white\") {\r\n      setMyStyle({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n      });\r\n      setBtnText(\"Enable dark mode\");\r\n    } else {\r\n      setMyStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n      });\r\n      setBtnText(\"Enable white mode\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div class=\"my-3\" style={myStyle}>\r\n      <h1 className=\"mx-3\">About us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style={myStyle}\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style={myStyle}\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style={myStyle}\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button\r\n        className=\"btn btn-success mx-2\"\r\n        style={myStyle}\r\n        onClick={toggleStyle}\r\n      >\r\n        {btnText}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return word.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissable fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong> {props.alert.message}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport About from \"./components/About\";\r\nimport React, { useState } from \"react\";\r\nimport Alert from \"./components/Alert\";\r\nimport { HashRouter, BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#042743\";\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Router>\r\n        <HashRouter basename=\"/\">\r\n        <Navbar\r\n          title=\"TextUtils\"\r\n          mode={mode}\r\n          toggleMode={toggleMode}\r\n          key={new Date()}\r\n        />\r\n        <Alert alert={alert} />\r\n        <div className=\"container my-3\">\r\n          <Routes>\r\n            {/* /users --> Component 1\r\n        /users/home --> Component 2 */}\r\n            <Route exact path=\"/about\" element={<About mode={mode} />}>\r\n            </Route>\r\n            <Route exact path=\"/\" element={<TextForm\r\n                showAlert={showAlert}\r\n                heading=\"Try TextUtils - word counter, character counter, remove extra spaces\"\r\n                mode={mode}\r\n              />}>\r\n              \r\n            </Route>\r\n          </Routes>\r\n        </div>\r\n        </HashRouter>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}