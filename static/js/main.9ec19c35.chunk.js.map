{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","message","App","setMode","setAlert","msg","setTimeout","document","body","Date","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ec19c35.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  // let myStyle = {\r\n  //   color: \"white\",\r\n  //   backgroundColor: \"black\",\r\n  // };\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li> */}\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              {props.mode === \"dark\" ? \"Disable dark mode\" : \"Enable dark mode\"}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About text here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  // Credits: A\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n  };\r\n\r\n  // Credits: Coding Wala\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed!\", \"success\");\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  // text = \"new text\"; // Wrong way to change the state\r\n  // setText(\"new text\"); // Correct way to change the state\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#13466e\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleLoClick}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleCopy}\r\n        >\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p>\r\n          {0.008 *\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !== 0;\r\n            }).length}{\" \"}\r\n          Minutes read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return word.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissable fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong> {props.alert.message}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport About from \"./components/About\";\r\nimport React, { useState } from \"react\";\r\nimport Alert from \"./components/Alert\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#042743\";\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Navbar\r\n          title=\"TextUtils\"\r\n          mode={mode}\r\n          toggleMode={toggleMode}\r\n          key={new Date()}\r\n        />\r\n        <Alert alert={alert} />\r\n        <div className=\"container my-3\">\r\n        <TextForm\r\n                showAlert={showAlert}\r\n                heading=\"Try TextUtils - word counter, character counter, remove extra spaces\"\r\n                mode={mode}\r\n              />\r\n          {/* <Routes> */}\r\n            {/* /users --> Component 1\r\n        /users/home --> Component 2 */}\r\n            {/* <Route exact path=\"/about\" element={<About mode={mode} />}>\r\n            </Route>\r\n            <Route exact path=\"/\" element={<TextForm\r\n                showAlert={showAlert}\r\n                heading=\"Try TextUtils - word counter, character counter, remove extra spaces\"\r\n                mode={mode}\r\n              />}>\r\n              \r\n            </Route>\r\n          </Routes> */}\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}